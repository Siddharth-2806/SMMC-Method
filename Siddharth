function[] = CFD_Assignment()
clear; clc;

T_0 = 0; %Start Time
T = 3; %End Time
t = 0.005; %Timestep
n = (T - T_0)/t; %No.of timesteps
i = 6; %Grid points in x direction
j = 6; %Grid points in y direction
k = i-1; %No. of markers

%Domain Length
L_x = 1; 
L_y = 1; 

% Viscosity 
nu = 1e-6; %Kinematic viscosity
rho = 1e3; %Density in kg/m3

%Size of CV
del_x = L_x/(i-1); 
del_y = L_y/(j-1);

%Marker Coordinates
X_Marker = zeros(1,k); 
Y_Marker = zeros(1,k); 
for c1 = 1:k
    X_Marker(1,c1) = del_x/2 + (c1-1)*del_x;
    Y_Marker(1,c1) = 2.5*del_y;
end

%Marker Velocities
U_k = zeros(1,k);
V_k = zeros(1,k);
U_k(1,1:k) = 0.01;
V_k(1,1:k) = 0.002;

%Tentative Velocites and Accelerations
U_ten = zeros(i,j-1); 
a_u_ten = zeros(i,j-1);
V_ten = zeros(i-1,j); 
a_v_ten = zeros(i-1,j); 

%Final Velocites
U = zeros(i,j-1); 
V = zeros(i-1,j); 
U(1:i,1:j-1) = 0.4;
V(1:i-1,1:j) = 0.05;

%Velocity Coordinates
U_X_cor = zeros(1,i);
V_X_cor = zeros(1,i-1);
U_Y_cor = zeros(1,j-1);
V_Y_cor = zeros(1,j);

%Accelerations
g_x = 0;
g_y = -9.81;

%Macro and Micro cell coordinates
Macro_X = zeros(1,i-1);
Macro_Y = zeros(1,j-1);
Micro_X = zeros(1,3*(i-1));
Micro_Y = zeros(1,3*(j-1));

for c12 = 1:i-1
    Macro_X(1,c12) = (c12 - 0.5)*del_x;
    for c13 = 3*c12-2:3*c12
        Micro_X(1,c13) = (c12 - 1)*del_x + del_x/6 + (c13 - 3*(c12 - 1) - 1)*del_x/3;
    end
end
for c14 = 1:j-1
    Macro_Y(1,c14) = (c14 - 0.5)*del_y;
    for c15 = 3*c14-2:3*c14
        Micro_Y(1,c15) = (c14 - 1)*del_y + del_y/6 + (c15 - 3*(c14 - 1) - 1)*del_x/3;
    end
end


%Velocity coordinate calculations
for c2 = 1:length(U_X_cor)
    U_X_cor(1,c2) = (c2-1)*del_x;
end
for c3 = 1:length(U_Y_cor)
    U_Y_cor(1,c3) = 0.5*del_y + (c3-1)*del_y;
end
for c4 = 1:length(V_X_cor)
    V_X_cor(1,c4) = 0.5*del_x + (c4-1)*del_x;
end
for c5 = 1:length(V_Y_cor)
    V_Y_cor(1,c5) = (c5-1)*del_y;
end
X_Marker(1,1:k) = X_Marker(1,1:k) + U_k(1,1:k)*t;
Y_Marker(1,1:k) = Y_Marker(1,1:k) + V_k(1,1:k)*t;

set(gca,'Xlim',[0 L_x], 'Ylim',[0 L_y])
curve = animatedline(X_Marker,Y_Marker,'Color','r','LineWidth',3);
for c6 = 1:n
    if c6>1
        clearpoints(curve)
    end
    %%% Marker Velocity Calculation Start %%%
    %Calculation of U_Velocity
    for c7 = 1:k
        for c8 = 1:length(U_X_cor)-1
            if X_Marker(1,c7) > U_X_cor(1,c8) && X_Marker(1,c7) < U_X_cor(1,c8+1)
                u_x_index = c8;
                for c9 = 1:length(U_Y_cor)-1
                    if Y_Marker(1,c7) > U_Y_cor(1,c9) && Y_Marker(1,c7) < U_Y_cor(1,c9+1)
                        u_y_index = c9;
                        A1 = (U_X_cor(1,c8+1) - X_Marker(1,c7))*(U_Y_cor(1,c9+1) - Y_Marker(1,c7));
                        A2 = (X_Marker(1,c7) - U_X_cor(1,c8))*(U_Y_cor(1,c9+1) - Y_Marker(1,c7));
                        A3 = (X_Marker(1,c7) - U_X_cor(1,c8))*(Y_Marker(1,c7) - U_Y_cor(1,c9));
                        A4 = (U_X_cor(1,c8+1) - X_Marker(1,c7))*(Y_Marker(1,c7) - U_Y_cor(1,c9));
                        U_k(1,c7) = (A1*U(u_x_index,u_y_index) + A2*U(u_x_index+1,u_y_index) + A3*U(u_x_index+1,u_y_index+1) + A4*U(u_x_index,u_y_index+1))/(del_x*del_y);
                    elseif Y_Marker(1,c7) < min(U_Y_cor)
                        u_y_index = 1;
                        A1 = (U_X_cor(1,c8+1) - X_Marker(1,c7))*Y_Marker(1,c7);
                        A2 = (X_Marker(1,c7) - U_X_cor(1,c8))*Y_Marker(1,c7);
                        U_k(1,c7) = (A1*U(u_x_index,u_y_index) + A2*U(u_x_index+1,u_y_index))/(A1+A2);
                    elseif Y_Marker(1,c7) > max(U_Y_cor)
                        u_y_index = j-1;
                        A1 = (U_X_cor(1,c8+1) - X_Marker(1,c7))*(L_y - max(U_Y_cor));
                        A2 = (X_Marker(1,c7) - U_X_cor(1,c8))*(L_y - max(U_Y_cor));
                        U_k(1,c7) = (A1*U(u_x_index,u_y_index) + A2*U(u_x_index+1,u_y_index))/(A1+A2);
                    else
                        continue
                    end
                end
            elseif X_Marker(1,c7) <= 0
                U_k(1,c7) = 0;
            elseif X_Marker(1,c7) >= L_x
                U_k(1,c7) = 0;
            else
                continue
            end
        end
        %Calculation of V_Velocity
        for c11 = 1:length(V_Y_cor)-1
            if Y_Marker(1,c7) > V_Y_cor(1,c11) && Y_Marker(1,c7) < V_Y_cor(1,c11+1)
                v_y_index = c11;
                for  c10 = 1:length(V_X_cor)-1
                    if X_Marker(1,c7) > V_X_cor(1,c10) && X_Marker(1,c7) < V_X_cor(1,c10+1)
                        v_x_index = c10;
                        A5 = (V_X_cor(1,c10+1) - X_Marker(1,c7))*(V_Y_cor(1,c11+1) - Y_Marker(1,c7));
                        A6 = (X_Marker(1,c7) - V_X_cor(1,c10))*(V_Y_cor(1,c11+1) - Y_Marker(1,c7));
                        A7 = (X_Marker(1,c7) - V_X_cor(1,c10))*(Y_Marker(1,c7) - V_Y_cor(1,c11));
                        A8 = (V_X_cor(1,c10+1) - X_Marker(1,c7))*(Y_Marker(1,c7) - V_Y_cor(1,c11));
                        V_k(1,c7) = (A5*V(v_x_index,v_y_index) + A6*V(v_x_index+1,v_y_index) + A7*V(v_x_index+1,v_y_index+1) + A8*V(v_x_index,v_y_index+1))/(del_x*del_y);
                    elseif X_Marker(1,c7) < min(V_X_cor)
                        v_x_index = 1;
                        A5 = X_Marker(1,c7)*(V_Y_cor(1,c11+1) - Y_Marker(1,c7));
                        A8 = X_Marker(1,c7)*(Y_Marker(1,c7) - V_Y_cor(1,c11));
                        V_k(1,c7) = (A5*V(v_x_index,v_y_index) + A8*V(v_x_index,v_y_index+1))/(A5+A8);
                    elseif X_Marker(1,c7) > max(V_X_cor)
                        v_x_index = j-1;
                        A5 = (L_x - X_Marker(1,c7))*(V_Y_cor(1,c11+1) - Y_Marker(1,c7));
                        A8 = (L_x - X_Marker(1,c7))*(Y_Marker(1,c7) - V_Y_cor(1,c11));
                        V_k(1,c7) = (A5*V(v_x_index,v_y_index) + A8*V(v_x_index,v_y_index+1))/(A5+A8);
                    else
                        continue
                    end
                end
            elseif Y_Marker(1,c7) <= 0
                V_k(1,c7) = 0;
            elseif Y_Marker(1,c7) >= L_y
                V_k(1,c7) = 0;
            else
                continue
            end
        end
        X_Marker(1,c7) = X_Marker(1,c7) + U_k(1,c7)*t;
        Y_Marker(1,c7) = Y_Marker(1,c7) + V_k(1,c7)*t;
       
    end 
    %%% Marker Velocity Calculation End %%%
    %%% Tentative Internal Velocity Calculation Start %%%
    xv = [0 X_Marker L_x]; 
    yv = [0 Y_Marker 0];
    a1 = [U_X_cor V_X_cor Macro_X Micro_X];
    a2 = [U_Y_cor V_Y_cor Macro_Y Micro_Y];
    
    [xq,yq] = meshgrid(a1,a2);
    in = inpolygon(xq,yq,xv,yv);
    for c16 = 1:i   
        for c17 = 1:j-1
            surface = 0;
            if in(c16,c17) == 0
                if or(c16 == 1,c16==i) == 1
                    continue
                else
                    if(in(3*(i+c16) - 3 : 3*(i+c16)-1,3*(j+c17) - 3 : 3*(j+c17)-1))==0
                        for c21 = 3*(i+c16-1) - 3 : 3*(i+c16-1)-1
                            c23 = 0;
                            for c22 = 3*(j+c17-1) - 3 : 3*(j+c17-1)-1
                                if in(c21,c22)==0
                                    c23 = c23 +1;
                                else
                                    continue
                                end
                            end
                            if c23>=0 && c23<=9
                                surface = 1;
                            end
                        end
                    elseif(in(3*(i+c16-1) - 3 : 3*(i+c16-1)-1,3*(j+c17-1) - 3 : 3*(j+c17-1)-1))==0
                        for c24 = 3*(i+c16) - 3 : 3*(i+c16)-1
                            c25 = 0;
                            for c26 = 3*(j+c17) - 3 : 3*(j+c17)-1
                                if in(c24,c26) == 0
                                    c25 = c25 + 1;
                                else
                                    continue
                                end
                            end
                            if c25 >=0 && c25 <=9
                                surface = 2;
                            end
                        end
                    else
                        continue
                    end
                end
            end
            if(in(c16,c17)) == 1 % Internal Velocity Located within the fluid
                if c17 ==1
                    U_vis_y = (U(c16,c17+1) - 2*U(c16,c17))/(del_y)^2;
                elseif c17 == j-1
                    U_vis_y = (U(c16,c17-1) - 2*U(c16,c17))/(del_y)^2;
                else
                    U_vis_y = (U(c16,c17+1) + U(c16,c17-1) - 2*U(c16,c17))/(del_y)^2;
                end
                if c16==1
                    U_l = U(c16,c17);
                    U_r = (U(c16,c17) + U(c16+1,c17))/2;
                    U_vis_x = (U(c16+1,c17) - 2*U(c16,c17))/(del_x)^2;
                    
                    if c17 == 1
                        V_bl = 0;
                        V_br = 0;
                        V_tl = V(c16,c17);
                        V_tr = V(c16+1,c17);
                        U_dbl = 0;
                        U_dbr = 0;
                        if V_tl>0
                            U_dtl = U(c16,c17);
                        else
                            U_dtl = U(c16,c17+1);
                        end
                        if V_tr>0
                            U_dtr = U(c16,c17);
                        else
                            U_dtr = U(c16,c17+1);
                        end 
                    else
                        V_bl = V(c16,c17-1);
                        V_br = V(c16+1,c17);
                        V_tl = V(c16,c17);
                        V_tr = V(c16+1,c17);
                        if V_bl>0
                            U_dbl = U(c16,c17-1);
                        else
                            U_dbl = U(c16,c17);
                        end
                        if V_br>0
                            U_dbr = U(c16,c17-1);
                        else
                            U_dbr = U(c16,c17);
                        end
                        if V_tl>0
                            U_dtl = U(c16,c17);
                        else
                            U_dtl = U(c16,c17+1);
                        end
                        if V_tr>0
                            U_dtr = U(c16,c17);
                        else
                            U_dtr = U(c16,c17+1);
                        end 
                    end
                    if U_l>0
                        U_dl = 0;
                    else
                        U_dl = U(c16,c17);
                    end
                    if U_r>0
                        U_dr = U(c16,c17);
                    else
                        U_dr = U(c16+1,c17);
                    end                    
                elseif c16==i
                    U_l = (U(c16-1,c17) + U(c16,c17))/2;
                    U_r = U(c16,c17);
                    U_vis_x = (U(c16-1,c17) - 2*U(c16,c17))/(del_x)^2;
                    V_bl = 0;
                    V_br = 0;
                    V_tl = 0;
                    V_tr = 0;
                    if U_l>0
                        U_dl = U(c16-1,c17);
                    else
                        U_dl = U(c16,c17);
                    end
                    if U_r>0
                        U_dr = U(c16,c17);
                    else
                        U_dr = 0;
                    end
                else
                    U_l =  (U(c16-1,c17) + U(c16,c17))/2;
                    U_r =  (U(c16,c17) + U(c16+1,c17))/2;
                    U_vis_x = (U(c16+1,c17) + U(c16-1,c17) - 2*U(c16,c17))/(del_x)^2;
                    if c17 == 1
                        V_bl = 0;
                        V_br = 0;
                        V_tl = V(c16,c17);
                        V_tr = V(c16+1,c17);
                        if V_tl>0
                            U_dtl=U(c16,c17);               
                        else
                            U_dtl = U(c16,c17+1);
                        end
                        if V_tr>0
                            U_dtr = U(c16,c17);
                        else
                            U_dtr = U(c16,c17+1);
                        end
                    else
                        V_bl = V(c16,c17-1);
                        V_br = V(c16+1,c17-1);
                        V_tl = V(c16,c17);
                        V_tr = V(c16+1,c17);
                        if V_bl>0
                            U_dbl=U(c16,c17-1);               
                        else
                            U_dbl = U(c16,c17);
                        end
                        if V_br>0
                            U_dbr = U(c16,c17-1);
                        else
                            U_dbr = U(c16,c17);
                        end
                        if V_tl>0
                            U_dtl=U(c16,c17);               
                        else
                            U_dtl = U(c16,c17+1);
                        end
                        if V_tr>0
                            U_dtr = U(c16,c17);
                        else
                            U_dtr = U(c16,c17+1);
                        end
                    end
                    if U_l>0
                        U_dl = U(c16-1,c17);
                    else
                        U_dl = U(c16,c17);
                    end
                    if U_r>0
                        U_dr = U(c16,c17);
                    else
                        U_dr = U(c16+1,c17);
                    end
                    
                end
                T_l = max(U_dl*U_l,0); % For first term
                T_r = max(U_dr*U_r,0); % For first term
                T_b = (V_bl*U_dbl + V_br*U_dbr)/2; %For second term
                T_t = (V_tl*U_dtl + V_tr*U_dtr)/2; %For second term
                a_u_ten(c16,c17) = (T_l - T_r)/del_x + (T_b - T_t)/del_y + nu*(U_vis_x + U_vis_y) + g_x;
                U_ten(c16,c17) = U(c16,c17) + t*a_u_ten(c16,c17);
            elseif surface == 1 || surface == 2
                if surface == 1
                    a_u_ten(c16,c17) = a_u_ten(c16+1,c17);
                else
                    a_u_ten(c16,c17) = a_u_ten(c16-1,c17);
                end
                U_ten(c16,c17) = U(c16,c17) + t*a_u_ten(c16,c17);
            else % U Outside Internal Velocity
                if c16==1
                    if c17 == 1
                        c20 = 0;
                        if in(c16+1,c17) == 1 
                            c20 = c20+1;
                            U_ten(c16,c17) = U_ten(c16+1,c17);
                        end
                        if in(c16, c17+1) == 1
                            c20 = c20+1;
                            U_ten(c16,c17) = U_ten(c16,c17) + U_ten(c16,c17+1);
                        end
                        U_ten(c16,c17) = U_ten(c16,c17)/c20;
                    elseif c17 == j-1
                        c20 = 0;
                        if in(c16+1,c17) == 1 
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16+1,c17);
                        end
                        if in(c16, c17-1) == 1
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16,c17) + U_ten(c16,c17-1);
                        end
                        U_ten(c16,c17) = U_ten(c16,c17)/c20;
                    else
                        c20 = 0;
                        if in(c16+1,c17) == 1 
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16+1,c17);
                        end 
                        if in(c16, c17+1) == 1
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16,c17) + U_ten(c16,c17+1);
                        end
                        if in(c16, c17-1) == 1
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16,c17) + U_ten(c16,c17-1);
                        end
                        U_ten(c16,c17) = U_ten(c16,c17)/c20;
                    end

                elseif c16 == i
                    if c17 == 1
                        c20 = 0;
                        if in(c16-1,c17) == 1
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16-1,c17);
                        end
                        if in(c16, c17+1) == 1
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16,c17) + U_ten(c16,c17+1);
                        end
                        U_ten(c16,c17) = U_ten(c16,c17)/c20;
                    elseif c17 == j-1
                        c20 = 0;
                        if in(c16-1,c17) == 1
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16-1,c17);
                        end
                        if in(c16, c17-1) == 1
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16,c17) + U_ten(c16,c17-1);
                        end
                        U_ten(c16,c17) = U_ten(c16,c17)/c20;
                    else
                        c20 = 0;
                        if in(c16-1,c17) == 1 
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16-1,c17);
                        end 
                        if in(c16, c17+1) == 1
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16,c17) + U_ten(c16,c17+1);
                        end
                        if in(c16, c17-1) == 1
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16,c17) + U_ten(c16,c17-1);
                        end
                        U_ten(c16,c17) = U_ten(c16,c17)/c20;
                    end
                else
                    if c17 == 1
                        c20 = 0;
                        if in(c16+1,c17) == 1 
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16+1,c17);  
                        end
                        if in(c16-1,c17) == 1
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16,c17) + U_ten(c16-1,c17);

                        end
                        if in(c16, c17+1) == 1
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16,c17) + U_ten(c16,c17+1);
                        end
                        U_ten(c16,c17) = U_ten(c16,c17)/c20;
                    elseif c17 == j-1
                        c20 = 0;
                        if in(c16+1,c17) == 1 
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16+1,c17);
                        end
                        if in(c16-1,c17) == 1
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16,c17) + U_ten(c16-1,c17);
                        end
                        if in(c16, c17-1) == 1
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16,c17) + U_ten(c16,c17-1);
                        end
                        U_ten(c16,c17) = U_ten(c16,c17)/c20;
                    else
                        c20 = 0;
                        if in(c16+1,c17) == 1 
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16+1,c17);
                        end
                        if in(c16-1,c17) == 1
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16,c17) + U_ten(c16-1,c17);
                        end
                        if in(c16, c17+1) == 1
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16,c17) + U_ten(c16,c17+1);
                        end
                        if in(c16, c17-1) == 1
                            c20 = c20 + 1;
                            U_ten(c16,c17) = U_ten(c16,c17) + U_ten(c16,c17-1);
                        end
                        U_ten(c16,c17) = U_ten(c16,c17)/c20;
                    end
                end               
            end
        end
    end
    for c18 = i+1:2
        for c19 = j:2*j-1
            if c19 == j || c19 == 2*j-1
                continue
            else
                if(in(3*c18-6:3*c18-4,3*(c19+2)-3:3*(c19+2)-1))==0
                   for c26 = 3*(c18-1)-6:3*(c18-1)-4
                       c27=0;
                       for c28 = 3*(c19+1)-3:3*(c19+1)-1
                           if in(c26,c28) == 0
                              c27 = c27 + 1;
                           else
                              continue
                           end
                       end
                       if c27>=0 && c27<=9
                          surface = 1;
                       end
                   end
                elseif(in(3*(c18-1)-6:3*(c18-1)-4,3*(c19+1)-3:3*(c19+1)-1)) == 0
                    for c29 = 3*c18-6:3*c18-4
                       c30 = 0;
                       for c31 = 3*(c19+2) -3:3*(c19+2)-1
                           if in(c29,c31) == 0
                              c30 = c30 +1;
                           else
                              continue
                           end
                       end
                       if c30>=0 && c30<=9
                          surface = 2;
                       end
                    end
                else
                    continue
                 end
            end
            if(in(c18,c19)) == 1 % V Located within the fluid
                
                if c18 == i+1
                    V_vis_x = (V(c18-i+1,c19-j+1) - 2*V(c18-i,c19-j+1))/(del_x)^2;
                elseif c18 == 2*i-1
                    V_vis_x = (V(c18-i-1,c19-j+1) - 2*V(c18-i,c19-j+1))/(del_x)^2;
                else
                    V_vis_x = (V(c18-i-1,c19-j+1) + V(c18-i+1,c19-j+1) - 2*V(c18-i,c19-j+1))/(del_x)^2;
                end
                if c19 == j
                    V_b = V(c18-i,c19-j+1);
                    V_t = (V(c18-i,c19-j+1) + V(c18-i,c19-j+2))/2;
                    V_vis_y = (V(c18-i,c19-j+2) - 2*V(c18-i,c19-j+1))/(del_y)^2;
                    if V_b > 0
                        V_db = 0;
                    else
                        V_db = V(c18-i,c19-j+1);
                    end
                    if V_t > 0
                        V_dt = V(c18-i,c19-j+1);
                    else
                        V_dt = V(c18-i,c19-j+2);         
                    end
                    if c18 == i+1
                        U_lb = 0;
                        U_lt = U(c18-i,c19-j+1);
                        U_rb = 0;
                        U_rt = U(c18-i+1,c19-j+1);
                        V_dlb = 0;
                        V_drb = 0;
                        V_dlt = 0;
                        if U_rt>0
                            V_drt = V(c18-i+1,c19-j+1);
                        else
                            V_drt = V(c18-i+1,c19-j+2);
                        end
                    elseif c18 == 2*i-1
                        U_lb = 0;
                        U_lt = U(c18-i,c19-j+1);
                        U_rb = 0;
                        U_rt = U(c18-i+1,c19-j+1);
                        V_dlb = 0;
                        V_drb = 0;
                        V_drt = 0;
                        if U_lt>0
                            V_dlt = V(c18-i-1,c19-j+1);
                        else
                            V_dlt = V(c18-i-1,c19-j+2);
                        end
                    else
                        U_lb = 0;
                        U_lt = U(c18-i,c19-j+1);
                        U_rb = 0;
                        U_rt = U(c18-i+1,c19-j+1);
                        V_dlb = 0;
                        V_drb = 0;
                        if U_lt>0
                            V_dlt = V(c18-i-1,c19-j+1);
                        else
                            V_dlt = V(c18-i-1,c19-j+2); 
                        end
                        if U_rt>0
                            V_drt = V(c18-i+1,c19-j+1);
                        else
                            V_drt = V(c18-i+1,c19-j+2);
                        end
                    end
                    
                elseif c19 == 2*j-1
                    V_b = (V(c18-i,c19-j+1) + V(c18-i,c19-j))/2;
                    V_t = V(c18-i,c19-j+1);
                    V_vis_y = (V(c18-i,c19-j) - 2*V(c18-i,c19-j+1))/(del_y)^2;
                    if V_b > 0
                        V_db = V(c18-i,c19-j);
                    else
                        V_db = V(c18-i,c19-j+1);
                    end
                    if V_t > 0
                        V_dt = V(c18-i,c19-j+1);
                    else
                        V_dt = 0;
                    end
                    if c18 == i+1
                        U_lb = U(c18-i,c19-j);
                        U_lt = 0;
                        U_rb = U(c18-i+1,c19-j);
                        U_rt = 0;
                        V_dlt = 0;
                        V_drt = 0;
                        V_dlb = 0;
                        if U_rb>0
                            V_drb = V(c18-i+1,c19-j);
                        else
                            V_drb = V(c18-i+1,c19-j+1);
                        end
                    elseif c18==2*i-1 
                        U_lb = U(c18-i,c19-j);
                        U_lt = 0;
                        U_rb = U(c18-i+1,c19-j);
                        U_rt = 0;
                        V_dlt = 0;
                        V_drt = 0;
                        V_drb = 0;
                        if U_lb>0
                            V_dlb = V(c18-i-1,c19-j);
                        else
                            V_dlb = V(c18-i-1,c19-j+1);
                        end
                    else
                        U_lb = U(c18-i,c19-j);
                        U_lt = 0;
                        U_rb = U(c18-i+1,c19-j);
                        U_rt = 0;
                    end
                else
                    V_b = (V(c18-i,c19-j+1) + V(c18-i,c19-j))/2;
                    V_t = (V(c18-i,c19-j+1) + V(c18-i,c19-j+2))/2;
                    V_vis_y = (V(c18-i,c19-j) + V(c18-i,c19-j+2) - 2*V(c18-i,c19-j+1))/(del_y)^2;
                    if V_b > 0
                        V_db = V(c18-i,c19-j);
                    else
                        V_db = V(c18-i,c19-j+1);
                    end
                    if V_t > 0
                        V_dt = V(c18-i,c19-j+1);
                    else
                        V_dt = V(c18-i,c19-j+2);
                    end
                    if c18 == i+1   
                        U_lb = U(c18-i,c19-j);
                        U_lt = U(c18-i,c19-j+1);
                        U_rb = U(c18-i+1,c19-j);
                        U_rt = U(c18-i+1,c19-j+1);
                        V_dlb = 0;
                        V_dlt = 0;
                        if U_rb>0
                            V_drb = V(c18-i+1,c19-j);
                        else
                            V_drb = V(c18-i+1,c19-j+1); 
                        end
                        if U_rt>0
                            V_drt = V(c18-i+1,c19-j+1);
                        else
                            V_drt = V(c18-i+1,c19-j+2);
                        end
                    elseif c18==2*i-1 
                        U_lb = U(c18-i,c19-j);
                        U_lt = U(c18-i,c19-j+1);
                        U_rb = U(c18-i+1,c19-j);
                        U_rt = U(c18-i+1,c19-j+1);
                        V_drb = 0;
                        V_drt = 0;
                        if U_lb>0
                            V_dlb = V(c18-i-1,c19-j); 
                        else
                            V_dlb = V(c18-i-1,c19-j+1);
                        end
                        if U_lt>0
                            V_dlt = V(c18-i-1,c19-j+1);
                        else
                            V_dlt = V(c18-i-1,c19-j+2);
                        end
                    else
                        U_lb = U(c18-i,c19-j);
                        U_lt = U(c18-i,c19-j+1);
                        U_rb = U(c18-i+1,c19-j);
                        U_rt = U(c18-i+1,c19-j+1);
                        if U_lb>0
                            V_dlb = V(c18-i-1,c19-j); 
                        else
                            V_dlb = V(c18-i-1,c19-j+1);
                        end
                        if U_lt>0
                            V_dlt = V(c18-i-1,c19-j+1);
                        else
                            V_dlt = V(c18-i-1,c19-j+2);
                        end
                        if U_rb>0
                            V_drb = V(c18-i+1,c19-j);
                        else
                            V_drb = V(c18-i+1,c19-j+1); 
                        end
                        if U_rt>0
                            V_drt = V(c18-i+1,c19-j+1);
                        else
                            V_drt = V(c18-i+1,c19-j+2);
                        end
                    end
                end
                T_l = (U_lb*V_dlb + U_lt*V_dlt)/2;
                T_r = (U_rb*V_drb + U_rt*V_drt)/2;
                T_b = max(V_b*V_db,0);
                T_t = max(V_t*V_dt,0);
                a_v_ten(c18-i,c19-j+1) = (T_l - T_r)/del_x + (T_b - T_t)/del_y + nu*(V_vis_x + V_vis_y) + g_y;
                V_ten(c18-i,c19-j+1)= V(c18-i,c19-j+1) + t*a_v_ten(c18-i,c19-j+1);
            elseif surface == 1 || surface == 2 
                if surface == 1
                    V_ten(c18-i,c19-j+1) = V(c18-i,c19-j+1) + t*a_v_ten(c18-i,c19-j+2);
                else
                    V_ten(c18-i,c19-j+1) = V(c18-i,c19-j+1) + t*a_v_ten(c18-i,c19-j);
                end
            else%V Located outside fluid
                if c18==i+1
                    if c19 ==j
                        c20 = 0;
                        if in(c18-i,c19-j+2) == 1
                            c20 = c20 +1;
                            V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+2);
                        end
                        if in(c18-i+1,c19-j+1) == 1
                            c20 = c20 +1;
                            V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1) + V_ten(c18-i+1,c19-j+1);
                        end
                        V(c18-i,c19-j+1) = V(c18-i,c19-j+1)/c20;
                    elseif c19 == 2*j-1
                        c20 = 0;
                        if in(c18-i,c19-j) == 1
                            c20 = c20 +1;
                            V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j);
                        end
                        if in(c18-i+1,c19-j+1) == 1
                            c20 = c20 +1;
                            V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1) + V_ten(c18-i+1,c19-j+1);
                        end
                        V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1)/c20;
                    else
                        c20 = 0;
                        if in(c18-i,c19-j+2) == 1
                           c20 = c20 +1;
                           V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+2);
                        end
                        if in(c18-i+1,c19-j+1) == 1
                           c20 = c20 +1;
                           V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1) + V_ten(c18-i+1,c19-j+1);
                        end
                        if in(c18-i,c19-j) == 1
                           c20 = c20 +1;
                           V_ten(c18-i,c19-j+1) =V_ten(c18-i,c19-j+1) + V_ten(c18-i,c19-j);
                        end
                        V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1)/c20;
                    end
                elseif c18 == 2*i-1
                    if c19 ==j
                        c20 = 0;
                        if in(c18-i,c19-j+2) == 1
                            c20 = c20 +1;
                            V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+2);
                        end
                        if in(c18-i-1,c19-j+1) == 1
                            c20 = c20 +1;
                            V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1) + V_ten(c18-i-1,c19-j+1);
                        end
                        V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1)/c20;
                    elseif c19 == 2*j-1
                        c20 = 0;
                        if in(c18-i,c19-j) == 1
                            c20 = c20 +1;
                            V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j);
                        end
                        if in(c18-i-1,c19-j+1) == 1
                            c20 = c20 +1;
                            V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1) + V_ten(c18-i-1,c19-j+1);
                        end
                        V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1)/c20;
                    else
                        c20 = 0;
                        if in(c18-i-1,c19-j+1) == 1
                            c20 = c20 +1;
                            V_ten(c18-i,c19-j+1) = V_ten(c18-i-1,c19-j+1);
                        end
                        if in(c18-i,c19-j) == 1
                            c20 = c20 +1;
                            V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1) + V_ten(c18-i,c19-j);
                        end
                        if in(c18-i,c19-j+2) == 1
                            c20 = c20 +1;
                            V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1) + V_ten(c18-i,c19-j+2);
                        end
                        V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1)/c20;
                    end
                else
                    if c19 ==j
                        c20 = 0;
                        if in(c18-i+1,c19-j+1)
                           c20 = c20 +1;
                           V_ten(c18-i,c19-j+1) = V_ten(c18-i+1,c19-j+1); 
                        end
                        if in(c18-i-1,c19-j+1)
                           c20 = c20 +1;
                           V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1) + V_ten(c18-i-1,c19-j+1);
                        end
                        if in(c18-i,c19-j+2)
                           c20 = c20 +1;
                           V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1) + V_ten(c18-i,c19-j+2);
                        end
                        V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1)/c20;
                    elseif c19 == 2*j-1
                        c20 = 0;
                        if in(c18-i+1,c19-j+1)
                           c20 = c20 +1;
                           V_ten(c18-i,c19-j+1) = V_ten(c18-i+1,c19-j+1); 
                        end
                        if in(c18-i-1,c19-j+1)
                           c20 = c20 +1;
                           V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1) + V_ten(c18-i-1,c19-j+1);
                        end
                        if in(c18-i,c19-j)
                           c20 = c20 +1;
                           V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1) + V_ten(c18-i,c19-j);
                        end
                        V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1)/c20;
                    else
                        c20 = 0;
                        if in(c18-i+1,c19-j+1)
                           c20 = c20 +1;
                           V_ten(c18-i,c19-j+1) = V_ten(c18-i+1,c19-j+1); 
                        end
                        if in(c18-i-1,c19-j+1)
                           c20 = c20 +1;
                           V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1) + V_ten(c18-i-1,c19-j+1);
                        end
                        if in(c18-i,c19-j+2)
                            c20 = c20 +1;
                            V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1) + V_ten(c18-i,c19-j+2);
                        end
                        if in(c18-i,c19-j)
                            c20 = c20 +1;
                            V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1) + V_ten(c18-i,c19-j);
                        end
                        V_ten(c18-i,c19-j+1) = V_ten(c18-i,c19-j+1)/c20;
                    end
                end
            end
        end
    end
    
    addpoints(curve,X_Marker,Y_Marker)
    drawnow limitrate
    pause(0.05)
   
end


